public function registerEvents(): array
    {
        $styleArray = [
                'font' => [
                'bold' => true,
                ],
                'borders' => [
                    'outline' => [
                        'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THICK,
                        'color' => ['argb' => '00000000'],
                    ]
                ]
        ];


            return [
                AfterSheet::class    => function(AfterSheet $event) use ($styleArray)
                {
                    $cellRange = 'A1:A1'; // All headers
                    //$event->sheet->getDelegate()->getStyle($cellRange)->getFont()->setName('Calibri');
                    $event->sheet->getDelegate()->getStyle($cellRange)->getFont()->setSize(12);
                    $event->sheet->getStyle($cellRange)->ApplyFromArray($styleArray);
                },
            ];


    }



For soft delete:-
step 1:- add following in the migration file.
$table->softDeletes();

Step 2:- add the following inside the class.
 use SoftDeletes;

Example:-

class Client extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'title', 'logo', 'order_no','status',
    ];
}

Step 3:- In controller.
        $faqs = faq::withTrashed()->where('id',$id)->first();
        if($faqs->trashed()) {
            $faqs->forceDelete();
            return redirect('faqs?data-show=trashed')->with('message','faq is Deleted Parmanently.');
        }
        else{
            $faqs->delete();
            return redirect('faqs')->with('message','faq is Deleted Successfully.');

Step 4:-
// Faqs Route
Route::resource('faqs','FaqController')->middleware('auth');
Route::get('faqs/restore/{id}',['as'=>'faqs.restore','uses'=>'FaqController@restore'])->middleware('auth');

Also create restore function in controller
    public function restore($id)
    {
        $faqs = faq::withTrashed()->where('id',$id)->first();
        $faqs->restore();

        return redirect('faqs')->with('message','faq is Restored Successfully');

    }





    Laravle Cron Job | Wishing Happy Birthday Based on Birthdate

Step 1:- Create a laravel project.
laravel new cron-job

Step 2:- Create a database name "cron-job".

Step 3:- Database configuration on .env file.

Step 4:- Run php artisan migrate command.

Step 5:- Add birthdate in the user table using the command:-
php artisan make:migration add_birthdate_to_users_table --table=users

Example:-
Schema::table('users', function (Blueprint $table) {

            $table->date('birthdate')->nullable();

        });

Step 6:- run php artisan migrate

Step 7:- add birthdate to User model
Example:-
    protected $fillable = [

        'name',

        'email',

        'password',

        'birthdate'

    ];

Step 8:- Create database seeder for User table to insert demo data.

php artisan make:seeder UserSeeder

Example:-
        $users = [

            [

                "name" => "Hardik Savani",

                "email" => "hardik@gmail.com",

                "password" => bcrypt("123456"),

                "birthdate" => "2001-05-23"

            ],

            [

                "name" => "Vimal Kashiyani",

                "email" => "vimal@gmail.com",

                "password" => bcrypt("123456"),

                "birthdate" => "2001-06-23"

            ],

            [

                "name" => "Harshad Pathak",

                "email" => "harshad@gmail.com",

                "password" => bcrypt("123456"),

                "birthdate" => "2001-07-23"

            ]

        ];



        foreach ($users as $key => $value) {

            User::create($value);

        }

    }

Step 9:- Run the command
php artisan db:seed --class=UserSeeder

Step 10:- Create mail class.
php artisan make:mail BirthDayWish

Example:-
Inside Class:
public $user;



    /**

     * Create a new message instance.

     *

     * @return void

     */

    public function __construct($user)

    {

        $this->user = $user;

    }



    /**

     * Build the message.

     *

     * @return $this

     */

    public function build()

    {

        return $this->subject('Happy Birthday '. $this->user->name)

                    ->view('emails.birthdayWish');

    }

Step 11:- Create views/emails/birthdaywish.blade.php

Step 12:- Do smpt mail configuration in .env file. Note: you can comment previous config. and paste it.

MAIL_MAILER=smtp

MAIL_HOST=smtp.gmail.com

MAIL_PORT=465

MAIL_USERNAME=mygoogle@gmail.com

MAIL_PASSWORD=rrnnucvnqlbsl

MAIL_ENCRYPTION=ssl

MAIL_FROM_ADDRESS=mygoogle@gmail.com

MAIL_FROM_NAME="${APP_NAME}"

Step 13:- Create command.
php artisan make:command AutoBirthDayWish

Step 14:- Go inside app/console/commands/AutoBirthdayWish.php

<?php



namespace App\Console\Commands;



use Illuminate\Console\Command;

use Mail;

use App\Mail\BirthDayWish;

use App\Models\User;



class AutoBirthDayWish extends Command

{

    /**

     * The name and signature of the console command.

     *

     * @var string

     */

    protected $signature = 'auto:birthdaywith';



    /**

     * The console command description.

     *

     * @var string

     */

    protected $description = 'Command description';



    /**

     * Execute the console command.

     *

     * @return int

     */

    public function handle()

    {

        $users = User::whereMonth('birthdate', date('m'))

                    ->whereDay('birthdate', date('d'))

                    ->get();



        if ($users->count() > 0) {

            foreach ($users as $user) {

                Mail::to($user)->send(new BirthDayWish($user));

            }

        }



        return 0;

    }

}

Step 15:- Go inside kernel.php and specify command in schedule.
    protected function schedule(Schedule $schedule)

    {

        $schedule->command('auto:birthdaywith')->daily();

    }

Note:-
Scheduling accepts following:-
Method 	Description
->cron(‘* * * * * *’); 	Run the task on a custom Cron schedule
->everyMinute(); 	Run the task every minute
->everyFiveMinutes(); 	Run the task every five minutes
->everyTenMinutes(); 	Run the task every ten minutes
->everyFifteenMinutes(); 	Run the task every fifteen minutes
->everyThirtyMinutes(); 	Run the task every thirty minutes
->hourly(); 	Run the task every hour
->hourlyAt(17); 	Run the task every hour at 17 mins past the hour
->daily(); 	Run the task every day at midnight
->dailyAt(’13:00′); 	Run the task every day at 13:00
->twiceDaily(1, 13); 	Run the task daily at 1:00 & 13:00
->weekly(); 	Run the task every week
->weeklyOn(1, ‘8:00’); 	Run the task every week on Tuesday at 8:00
->monthly(); 	Run the task every month
->monthlyOn(4, ’15:00′); 	Run the task every month on the 4th at 15:00
->quarterly(); 	Run the task every quarter
->yearly(); 	Run the task every year
->timezone(‘America/New_York’); 	Set the timezone

Step 16:- Now, it's time to test.
Way 1:
Test the specific cron job.
php artisan auto:birthdaywith

Way 2:
php artisan schedule:work







Stripe Payment:-
Step 1:- Create your account on https://dashboard.stripe.com/login .

Step 2:- Get publisher key and secret key from stripe dashboard api page.

Step 3:- Open .env file and put this code.

STRIPE_PUBLISHABLE_KEY=PASTE_PUBLISHABLE_KEY
STRIPE_SECRET_KEY=PASTE_SECRET_KEY
STRIPE_CURRENCY=USD

Step 4:- php artisan config:cache

Step 5:- Create a payments table.

php artisan make:migration create_payments_table

Step 6:- You can insert the following fields.
public function up()
{
    Schema::create('payments', function (Blueprint $table) {
        $table->bigIncrements('id');
        $table->string('payment_id');
        $table->string('payer_email');
        $table->float('amount', 10, 2);
        $table->string('currency');
        $table->string('payment_status');
        $table->timestamps();
    });

Step 7:- Run the following command.
php artisan migrate

Step 8:- Create a page payment.blade.php which consists of form for sending money.

<link rel="stylesheet" href="{{ asset('/css/style.css') }}" />
<script src="https://js.stripe.com/v3/"></script>

@if ($message = Session::get('success'))
    <div class="success">
        <strong>{{ $message }}</strong>
    </div>
@endif


@if ($message = Session::get('error'))
    <div class="error">
        <strong>{{ $message }}</strong>
    </div>
@endif

<form action="{{ url('charge') }}" method="post" id="payment-form">
    <div class="form-row">
        <p><input type="text" name="amount" placeholder="Enter Amount" /></p>
        <p><input type="email" name="email" placeholder="Enter Email" /></p>
        <label for="card-element">
        Credit or debit card
        </label>
        <div id="card-element">
        <!-- A Stripe Element will be inserted here. -->
        </div>

        <!-- Used to display form errors. -->
        <div id="card-errors" role="alert"></div>
    </div>
    <p><button>Submit Payment</button></p>
    {{ csrf_field() }}
</form>
<script>
var publishable_key = '{{ env('STRIPE_PUBLISHABLE_KEY') }}';
</script>
<script src="{{ asset('/js/card.js') }}"></script>
}

Step 9:- go to web.php

Route::get('/payment', 'PaymentController@index'); (show form)
Route::post('/charge', 'PaymentController@charge');
Route::get('/confirm', 'PaymentController@confirm');

Step 10:- Go to public/js and create card.js .

// Create a Stripe client.
var stripe = Stripe(publishable_key);

// Create an instance of Elements.
var elements = stripe.elements();

// Custom styling can be passed to options when creating an Element.
// (Note that this demo uses a wider set of styles than the guide below.)
var style = {
    base: {
        color: '#32325d',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
            color: '#aab7c4'
        }
    },
    invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
    }
};

// Create an instance of the card Element.
var card = elements.create('card', {style: style});

// Add an instance of the card Element into the `card-element` <div>.
card.mount('#card-element');

// Handle real-time validation errors from the card Element.
card.addEventListener('change', function(event) {
    var displayError = document.getElementById('card-errors');
    if (event.error) {
        displayError.textContent = event.error.message;
    } else {
        displayError.textContent = '';
    }
});

// Handle form submission.
var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
    event.preventDefault();

    stripe.createToken(card).then(function(result) {
        if (result.error) {
            // Inform the user if there was an error.
            var errorElement = document.getElementById('card-errors');
            errorElement.textContent = result.error.message;
        } else {
            // Send the token to your server.
            stripeTokenHandler(result.token);
        }
    });
});

// Submit the form with the token ID.
function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('payment-form');
    var hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'stripeToken');
    hiddenInput.setAttribute('value', token.id);
    form.appendChild(hiddenInput);

    // Submit the form
    form.submit();
}

Step 11:- create style.css inside css .

.StripeElement {
    box-sizing: border-box;

    height: 40px;

    padding: 10px 12px;

    border: 1px solid transparent;
    border-radius: 4px;
    background-color: white;

    box-shadow: 0 1px 3px 0 #e6ebf1;
    -webkit-transition: box-shadow 150ms ease;
    transition: box-shadow 150ms ease;
}

.StripeElement--focus {
    box-shadow: 0 1px 3px 0 #cfd7df;
}

.StripeElement--invalid {
    border-color: #fa755a;
}

.StripeElement--webkit-autofill {
    background-color: #fefde5 !important;
}

Step 12:- NOw, install omnipay package.
composer require league/omnipay omnipay/stripe

Step 13:- create a payment controller.
php artisan make:controller PaymentController

Step 14:- create a Payment model

php artisan make:model Payment

Step 15:- Insert this code inside Payment Controller.

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Omnipay\Omnipay;
use App\Models\Payment;

class PaymentController extends Controller
{
    public $gateway;
    public $completePaymentUrl;

    public function __construct()
    {
        $this->gateway = Omnipay::create('Stripe\PaymentIntents');
        $this->gateway->setApiKey(env('STRIPE_SECRET_KEY'));
        $this->completePaymentUrl = url('confirm');
    }

    public function index()
    {
        return view('payment');
    }

    public function charge(Request $request)
    {
        if($request->input('stripeToken'))
        {
            $token = $request->input('stripeToken');

            $response = $this->gateway->authorize([
                'amount' => $request->input('amount'),
                'currency' => env('STRIPE_CURRENCY'),
                'description' => 'This is a X purchase transaction.',
                'token' => $token,
                'returnUrl' => $this->completePaymentUrl,
                'confirm' => true,
            ])->send();

            if($response->isSuccessful())
            {
                $response = $this->gateway->capture([
                    'amount' => $request->input('amount'),
                    'currency' => env('STRIPE_CURRENCY'),
                    'paymentIntentReference' => $response->getPaymentIntentReference(),
                ])->send();

                $arr_payment_data = $response->getData();

                $this->store_payment([
                    'payment_id' => $arr_payment_data['id'],
                    'payer_email' => $request->input('email'),
                    'amount' => $arr_payment_data['amount']/100,
                    'currency' => env('STRIPE_CURRENCY'),
                    'payment_status' => $arr_payment_data['status'],
                ]);

                return redirect("payment")->with("success", "Payment is successful. Your payment id is: ". $arr_payment_data['id']);
            }
            elseif($response->isRedirect())
            {
                session(['payer_email' => $request->input('email')]);
                $response->redirect();
            }
            else
            {
                return redirect("payment")->with("error", $response->getMessage());
            }
        }
    }

    public function confirm(Request $request)
    {
        $response = $this->gateway->confirm([
            'paymentIntentReference' => $request->input('payment_intent'),
            'returnUrl' => $this->completePaymentUrl,
        ])->send();

        if($response->isSuccessful())
        {
            $response = $this->gateway->capture([
                'amount' => $request->input('amount'),
                'currency' => env('STRIPE_CURRENCY'),
                'paymentIntentReference' => $request->input('payment_intent'),
            ])->send();

            $arr_payment_data = $response->getData();

            $this->store_payment([
                'payment_id' => $arr_payment_data['id'],
                'payer_email' => session('payer_email'),
                'amount' => $arr_payment_data['amount']/100,
                'currency' => env('STRIPE_CURRENCY'),
                'payment_status' => $arr_payment_data['status'],
            ]);

            return redirect("payment")->with("success", "Payment is successful. Your payment id is: ". $arr_payment_data['id']);
        }
        else
        {
            return redirect("payment")->with("error", $response->getMessage());
        }
    }

    public function store_payment($arr_data = [])
    {
        $isPaymentExist = Payment::where('payment_id', $arr_data['payment_id'])->first();

        if(!$isPaymentExist)
        {
            $payment = new Payment;
            $payment->payment_id = $arr_data['payment_id'];
            $payment->payer_email = $arr_data['payer_email'];
            $payment->amount = $arr_data['amount'];
            $payment->currency = env('STRIPE_CURRENCY');
            $payment->payment_status = $arr_data['payment_status'];
            $payment->save();
        }
    }
}

Now, you can use dummy credit cards for testing the payment.

https://stripe.com/docs/testing


https://artisansweb.net/stripe-payment-gateway-integration-in-laravel/

https://github.com/thephpleague/omnipay-stripe






Joining
Raw Query

Eloquet Query

Eloquent Relationship
One to Many
many to one
many to many
one to one


Example:-

Tale:- product_category
Model: Product_category (one)


    public function subcategory()
    {
        return $this->hasMany('App\Models\Subcategory','product_category_id','id');
    }



Table:- subcategory
Model: Subcategory (many)

    public function product_category()
    {
        return $this->belongsTo('App\Models\Product_category','product_category_id','id');
    }


How to retreive data in view ?
If I am going to show product category in the index view of subcategory. Then, I should do following:-

{{$category->product_category()->first()->name}}


Blogs System

Blog category
You accept blot category from the user.


blog

You also accept blog category.
Blog category
select box
(data will be fetched from blog_category table)




//To load siteconfigs in page

@php
$site_config=App\Siteconfig::where('status', 1)->get();
@endphp
 yo halnus.
 ani. data render garne thau ma.
@if(isset($site_config->where('sitekey', 'footer-about')->first()->sitevalue)){!!$site_config->where('sitekey', 'footer-about')->first()->sitevalue!!}@endif
 footer-about vaneko chai sitekey ho.
 so, footer-about 2 thau ma xa teslai change hanepaxi tyo thau ma tesko sitekey render hunxa.
@if(isset($site_config->where('sitekey', 'email')->first()->sitevalue)){!!$site_config->where('sitekey', 'email')->first()->sitevalue!!}@endif
yesma email render hunxa.
@if(isset($site_config->where('sitekey', 'phone')->first()->sitevalue)){!!$site_config->where('sitekey', 'phone')->first()->sitevalue!!}@endif
yesma phone render hunxa.
 bujhnu vayo ?
jun page ma siteconfig ko values render garne teha.
top ma.
 @php
$site_config=App\Siteconfig::where('status', 1)->get();
@endphp


. Comment System . (Disqus)
2. Securing through Middleware
3. Pagination
4. Popular Posts
5. Looping wala post haru differnet design ma dekhauna ko lagi.
6. $post->created_at->format("diffforhumans");
7. APP_URL

Code Insided CheckRole:-

        $user_verify = User::select('usertype')->where('id',Auth::user()->id)->first();
        if($user_verify->usertype == 1) {
            return $next($request);
        }
        else {
            return abort(403);
        }
Your Kernel.php must be like this:-
    protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'CheckRole' => \App\Http\Middleware\CheckRole::class,
    ];

CheckRole Add garne.

$news = new News;
$news = $news->where('status',1)->latest()->paginate(5);


<div>
	@foreach($news as $new)
	<p>{{$new->title}}</p>
	@endforeach

	{{$news->links()}}
</div>

If you want custom pagination design.
{{$news->links('pagination-design')}}

Laravel ko vendor vitra pagination vanne hunxa. tesko blade design pagination default design haru hunxa.
tesko dynamic code haru layera yesma copy paste garera milaye hunxa.

4. Popular Posts
https://github.com/cyrildewit/eloquent-viewable

Please use this package.


5. looping wala post

@foreach($posts as $post)
if($loop->iteration%2==0)
a b
@else
b a
@endif
@endforeach

6. post ko date haru dekhauna chai

$post->created_at->format("diffforhumans");

If you want this: 6 mins. ago, 7 mins ago.

{{ post>created_at->format('d m Y i');

Laravel Carbon
{{ Carbon\Carbon::parse($quotes->created_at)->format('d-m-Y i') }}

7. APP_URL

pages
(id, title, page_design_type, slug, img, content)
1, about us, about-us, about.jpg, This is about us)

video content (1)
photos content (2)

index.blade.php
index1.blade.php


Home, About

menus
(id, name, link, order_no)
1, Home, index, 1
2, About, page/about-us, 2


Routes/web.php

Route::get('page/{id}','App\Http\FrontendController@page');

Inside frontendcontroller@page function

public function page($id)
{
	$page = new Page;
	$page = $page->where('slug',$id)->first();
	return view('page',compact('page');
}

Inside views/page.blade.php

<div>
	<h1>{{$page->name}}
	<p>{!!$page->content!!}</p>
</div>

Disclaimer
FAQs
Policy
Privacy policy
About company






Creating API in Laravel using passport

Step 1:- Install Passport
composer require laravel/passport

Step 2:- Migrate all the files
php artisan migrate

Step 3:- Install Passport
php artisan passport:install


Step 4:- Add following in three places
HasApiTokens in App/Models/User.php

Passport::routes(); inside public function boot() in AuthServiceProvider.php


Step 5:- Add following code inside Config/auth.php inside guards
    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],

        'api' => [
            'driver' => 'passport',
            'provider' => 'users',
            'hash' => true,
        ],
    ],

Step 6:- Create products table in the database.
php artisan make:migration create_products_table

and add following fields.
$table->string('name');
$table->text('detail');

then, php artisan migrate

Step7:- Create a model for products.
php artisan make:model Product

Step 8:- Create Api routes, Place this code inside Routes/api.php

Route::post('register', 'API\RegisterController@register');

Route::middleware('auth:api')->group( function () {
	Route::resource('products', 'API\ProductController');
});

Step 9:- Create a API folder inside HTTP/Controllers/API and create three files BaseController.php, RegisterController.php and ProductController.php

Now, Our API is ready:-

Here is Routes URL with Verb:

1) Login: Verb:GET, URL:http://localhost:8000/oauth/token

2) Register: Verb:GET, URL:http://localhost:8000/api/register

3) List: Verb:GET, URL:http://localhost:8000/api/products

4) Create: Verb:POST, URL:http://localhost:8000/api/products

5) Show: Verb:GET, URL:http://localhost:8000/api/products/{id}

6) Update: Verb:PUT, URL:http://localhost:8000/api/products/{id}

7) Delete: Verb:DELETE, URL:http://localhost:8000/api/products/{id}


1) Login: Verb:GET, URL:http://localhost:8000/oauth/token

Method: POST
URI: http://localhost:8000/oauth/token
Go to body  and select form-data
Input the following:-
grant_type = password
client_id = 2 (from oauth_clients table (id))
client_secret = 5WsCXHwQkb5spIvzSm7QVR1y0WIYmwhbzzXjqSIU (from oauth_clients table (secret))
username = email  here
password = password here
scope =

Result will look like this:-
{
    "token_type": "Bearer",
    "expires_in": 31536000,
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIyIiwianRpIjoiYTQ5ZDE0ZDZlZmQzOGI2ZDkyMzBkY2M3ZDNiY2FlZjcwNDNlZGEwYmE3MGU1YmNhNmE2MWExODY2YzIzNjBhNzRhZTQ4ODA4YjdiOGVhOGIiLCJpYXQiOjE2NTQ5Mjg4MTMsIm5iZiI6MTY1NDkyODgxMywiZXhwIjoxNjg2NDY0ODEzLCJzdWIiOiIyIiwic2NvcGVzIjpbXX0.CqfI2cCHwsTgLY9ApJpPVygDK-zAEo0JxE-0T_NE7ivjTnrmdDeAUSSs7AAFIi-5wxVqYKegUC4oSNSZsy9qtDWRvqa_3RfxD7Bs-6I-er-FlnJflX-IMkHJpnea_rp83Xhrm3pLtzGhj85-InOOK6MLR4iVl-8EqdJ_JLpmRsK768Hu7IxK8X17zgQvkNmDs4NWH2x_GCFAL9FpC3jPutLwTzMOe4UqLqTG73PafFDFaXZ5dU5FiONn2KjBmqpUnHi_1i0pcSOQrxSqBVX2GJIiDidOvL1thZ2Z_4WVcq8uwKT0Fr9mdKBI0k7pySj6XprZakFPkyWGEh6VdYHTCwI7FQAqhEuzoYeHd9uUxtmUKNTSGDSLLLOcQyfayoiM5UPyQwl7sonNb0ZGn06KeAhe17mthWk3TSHLzavwPNB2W5A9sYp6XhGvBs-DnIcFMkqIlJ__uKvgRC-J4fGBGtbi2_ey3i-wFwvVawoRfwc0Tv6ZogllsSbrVMA1pLkiUa0cJ-RsmVkZSAqnqExeynD-9r0zCLZCiNLSQQnzb-HwJWdZKxHscxEB4t5wpEA-hFvDp6QEIkneoUB9H67MzFljC2AuGsRo17ai8ssO0jKyG5jyKq-7DrJ3lD8F5Nwg2ceIdENE6_j1G-exY8nf6RaWyxVObcWl9hyJSnv-dw4",
    "refresh_token": "def502008201253bc9ec09f3c3ae6b9632d5a1bd85dbdab6e2900eae33dbf158c0fd46eca1fad80c0e79185660834dc49b311122487a1fca008a3c53c2d5a51704a482c28b727d5690d8a9f49e93b4f436d63006d277788fca2b6d09c15930e7a3a7423bd5eb1f2e880c9913960442fa108d197e59a659a305add40e8f0d0cbaeda0fca7ad7960c562bbef9caf52308de67200935053d992a553891115977deff50705bdd762fccbcfdfd89a227b80f1eaec09478fb6b6fd76358ea4077053f589d8e4c7447b999bdc0a9d888baefada6445fef50c5ea5dcf82c8589c08d4b80484f7d4ad2f0ef6959fbbf0b9bc07fd9fe4ae34dc3488168b40d54810065ea9cdbe39793eca5c979922816f1e83e366ee8f2b8a690a3a5ef7f2ea3b13b58334e056897cd76299d6bd613492cfd5071865dfb25ecc6037a28030d2832b65ec1fc032d9623f789bfddf39f857b2fe58b1521a32cd9fde08ee7d9678146925df23418"
}

2) Register: Verb:POST, URL:http://localhost:8000/api/register
Method: POST
URI : http://localhost:8000/api/register
Go to body  and select form-data
Input the following:-
name
email
password
c_password



3) List: Verb:GET, URL:http://localhost:8000/api/products

To access protected routes, you need to provide access keys.

    Authorization tab > Choose Bearer Token from Type dropdown
    And finally place the token.
and place the access token.

Now, API is done.


Getting started with Livewire

Step 1:- Start a Laravel project and install livewire.
composer require livewire/livewire

Step 2:- Initilize livewire styles and scripts.
@livewireStyles
@livewireScripts

Step 3:- php artisan make:livewire component_name

php artisan make:livewire counter


Step 4:- php artisan  make:livewire comment
